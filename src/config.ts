import { RawTypesConfig } from "@graphql-codegen/visitor-plugin-common";

/**
 * @description This plugin generates the base TypeScript types, based on your GraphQL schema.
 *
 * The types generated by this plugin are simple, and refers to the exact structure of your schema, and it's used as the base types for other plugins (such as `typescript-operations` / `typescript-resolvers`)
 */
export interface TypeScriptPluginConfig extends RawTypesConfig {
  /**
   * @description Will prefix every generated `const`.
   * @default 'mock'
   *
   * @exampleMarkdown
   * ```ts filename="codegen.ts"
   * import type { CodegenConfig } from '@graphql-codegen/cli'
   *
   * const config: CodegenConfig = {
   *   // ...
   *   generates: {
   *     'path/to/file.ts': {
   *       plugins: ['typescript'],
   *       config: {
   *         mockPrefix: 'mock'
   *       }
   *     }
   *   }
   * }
   * export default config
   * ```
   */
  mockPrefix?: string;
}

export enum Directives {
  FAKER = "faker",
  FAKER_LIST = "fakerList",
  FAKER_RESOLVER = "fakerResolver",
}

export enum ArgumentName {
  METHOD = "method",
  MODULE = "module",
  ARGS = "args",
  ITEMS = "items",
}
